generator client {
  provider = "prisma-client-js"
}

// Create .env file if needed
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users to be implemented.
model User {
  id             String          @id @default(uuid())
  age            Int
  name           String
  email          String          @unique
  // writtenPosts   Post[]          @relation("WrittenPosts")
  // favoritePosts  Post[]          @relation("FavoritePosts")
  userPreference UserPreference?
  role           Role            @default(BASIC)
  isAdmin        Boolean

  @@unique([age, name]) //Cannot have same name and same age for two different user
  @@index([email])
}

model UserPreference {
  id           String  @id @default(uuid())
  emailUpdates Boolean
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique
}

model Post {
  id            String     @id @default(uuid())
  title         String
  content String
  // createdAt     DateTime   @default(now())
  // updatedAt    DateTime   @updatedAt
  // author        User       @relation("WrittenPosts", fields: [authorId], references: [id])
  // authorId      String
  // favoritedBy   User?      @relation("FavoritePosts", fields: [favouriteId], references: [id])
  // favouriteId   String?
  // categories    Catagory[]

  // @@id([title,authorId]) here id can be generated with both title and authorId combination
}

model Category {
  id    String @id @default(uuid())
  name  String @unique
  // posts Post[]
}

enum Role {
  BASIC
  ADMIN
  EDITOR
}
